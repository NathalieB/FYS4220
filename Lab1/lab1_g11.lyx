#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
FYS4220 - Fall 2013 : Lab.
 Exercise 1
\end_layout

\begin_layout Author
KÃ©vin Zaporogezt and Nathalie Bonatout
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList figure

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList algorithm

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section*
Introduction
\end_layout

\begin_layout Standard
This lab exercise is an introduction to the FPGA programmation in the environmen
t Quartus II.
 Thus, we discovered during this work some of the most useful features provided
 by Quartus, and the way to do a simulation thanks to the software ModelSim.
 The exercise too allowed us to learn how to use and connect the board DE2,
 how to manage its components such as the LEDs or the 7-segment decoder.
\end_layout

\begin_layout Section
Getting Started
\end_layout

\begin_layout Subsection*
A - Switches and LEDs
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename algo_1ere.png
	scale 50

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Blinking LEDs
\end_layout

\end_inset


\end_layout

\end_inset

We checked that this algorithm produced exactly what we wanted on the board:
 it linked the switches to the LEDs, allowing us to make them blink by pushing
 the switches.
 This simple piece of code too allowed us to discover how to map the components
 of the DE2-70 board manually.
\end_layout

\begin_layout Subsection*
B - 7-segment decoder with functional and timing simulation
\end_layout

\begin_layout Standard
We want here to implement a 7-segment decoder displayed on the output HEX0
 of the board.
\end_layout

\begin_layout Standard
7.
 Running the functional simulation:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename screen_11_RTL_2.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Functional simulation
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
10.
 The gate simulation gives us a timing result slightly different from the
 RTL simulation.
 It can be explained by the fact that the components, even though they are
 kind of physically close, still induce a delay.
 So when the RTL simulation only checks the functional result of the system
 (so there is no timing information here), the gate simulation takes delays
 into account.
 And we can notice that a transition of 5 ns is way too fast for the system
 to work the way we expect it to work.
 Indeed, the intern frequency of the DE2-70 is 50MHz.
 So it allows us to change state every 20 ns.
 Thus, the output HEX0 takes from times to times random values with the
 gate simulation.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename screen_Gate_10.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Real Time simulation with transitions of 5 ns
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
11.We increased the time between the transition on SW from 5 ns to 20 ns.
 And the outcome of the simulation obviously changed: the system became
 more stable, but still has some unpredictable behaviors, which can be explained
 by the 
\begin_inset Quotes eld
\end_inset

physical delay
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
\align left
12.We can evaluate the time it takes before a transaction on the SW input
 results in a stable signal on HEX0 as 11,48ns.
 
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename screen_12_Gate.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Real time simulation with transitions of 20 ns
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
4-bit Counter and push Button
\end_layout

\begin_layout Standard
11.
 After pressing KEY0, we can see that the value displayed seems to jump
 from a value to another, discontinously.
 We cannot see the counter incrementing smoothly, by step of 1, and this
 is rather expected.
 Indeed, the frequency of the clock is 50MHz.
 This means that the value of the counter changes every 20ns as long as
 the button KEY0 is pushed.
\end_layout

\begin_layout Standard
We could see the value of the counter be incremented by step of 1 by delaying
 the clock, or by implementing a boolean which would block block the value
 of the counter after once incrementation, when KEY0 is pressed.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout LyX-Code
counter <= "0000" when reset_n = '1' 
\end_layout

\begin_layout LyX-Code
else unsigned(std_logic_vector(unsigned(counter) +1)) 
\end_layout

\begin_layout LyX-Code
when rising_edge(clk50) and ext_ena_n = '0' 
\end_layout

\begin_layout LyX-Code
and (countenable = false); 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
with ext_ena_n select countenable <= false when '1',
\end_layout

\begin_layout LyX-Code
true when others;
\begin_inset Caption

\begin_layout Plain Layout
Implementation of the blocking boolean
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align left
\begin_inset Graphics
	filename screen_IIa.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Caption

\begin_layout Plain Layout
Functional simulation for the counter
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Standard
Finally, we learned how to use Quartus (at least in its most basic features),
 and how to manage the tools provided with ModelSim.
 We encountered problems, some of them lead us to find a work around method
 (f.e., we had to deal with a system file already existing on the computer
 we were using, and preventing the compilation to go on.
 We still don't know why this problem occured, but achieved to continue
 anyway), and had to start from anew since we were used to Xilink, but this
 lab work really helped us to remember the main problems when programming
 a FPGA: the timing, and sequential, parallel programmation.
\end_layout

\end_body
\end_document
